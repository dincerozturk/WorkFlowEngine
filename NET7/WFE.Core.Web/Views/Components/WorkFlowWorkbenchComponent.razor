
<div class="btn-toolbar">
    <div class="btn-group">
        @*        <a href="@Url.Action("New", new { taskId = Model.ActiveTaskId, processType = ProcessType.Process })" class="btn btn-primary btn-sm">
        <i class="fa fa-arrow-right"></i> New Process
        </a>*@
    </div>
    <div class="btn-group">
        @*        <a href="@Url.Action("New", new { taskId = Model.ActiveTaskId, processType = ProcessType.Condition })" class="btn btn-primary btn-sm">
        <i class="fa fa-arrows"></i> New Condition
        </a>*@
    </div>
    <div class="btn-group">
        @*        <a href="@Url.Action("New", new { taskId = Model.ActiveTaskId, processType = ProcessType.DecisionPoint })" class="btn btn-primary btn-sm">
        <i class="fa fa-arrows"></i> New Decision Point
        </a>*@
    </div>
    <div class="btn-group">
        @*        <a href="@Url.Action("New", new { taskId = Model.ActiveTaskId, processType = ProcessType.SubProcess })" class="btn btn-primary btn-sm">
        <i class="fa fa-sitemap"></i> New Sub Process
        </a>*@
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <h5><i class="fa fa-check" aria-hidden="true"></i> New Process: Process which has special form or standart form</h5>
        <h5><i class="fa fa-check" aria-hidden="true"></i> New Condition: Process which has more than one direction </h5>
        <h5><i class="fa fa-check" aria-hidden="true"></i> New Decision Point: Method which will be developed. Return value must be [Y]es or [N]o</h5>
        <h5><i class="fa fa-check" aria-hidden="true"></i> New Sub Process: Definition for parallel task instance area which includes sub process.</h5>
    </div>
</div>

@if (Model.NextProcessList != null)
{
    <div class="panel-group" id="accordionTree">
        <WFE.Core.Web.Views.Components.TaskWriterComponent taskId="@((int)Model.FirstProcessId)" model="@Model" elementOfTree="@elementOfTree" listOfConditionOption="@listOfConditionOption" />

        @*        @TaskWriter(Model.FirstProcessId, elementOfTree, listOfConditionOption)*@

        @foreach (var islem in Model.NextProcessList.Where(x => !elementOfTree.Any(t => t == x.Process.Id)).ToList())
        {
            <WFE.Core.Web.Views.Components.TaskWriterComponent taskId="@islem.Process.Id" model="@Model" elementOfTree="@elementOfTree" listOfConditionOption="@listOfConditionOption" />

            @* @TaskWriter(islem.Process.Id, elementOfTree, listOfConditionOption)*@
        }
    </div>
    @*    <a class="btn btn-info btn-sm" style="cursor:pointer" title="Full Screen Work Flow" href='@Url.Action("ShowWorkFlowFullScreen", "WorkFlow", new { taskId = Model.ActiveTaskId})' target="_blank">
        <i class="glyphicon glyphicon-fullscreen"></i>
    </a>*@


    <div class="wrapper1">
        <div class="div1">
        </div>
    </div>
    <div class="wrapper2">
        <div class="div2">

            <div id="isAkisiGoruntulemeBolumu" class="mermaid">
                <WFE.Core.Web.Views.Components.ShowWorkFlowComponent taskId="@Model.ActiveTaskId" />
            
            </div>

        </div>
    </div>
    <h5>* You can select process with single click</h5>
    <h5>* You can edit process with double click</h5>
}

@code {
    [Inject]
    public WorkFlowManager.Services.DbServices.IWorkFlowService _workFlowService { get; set; }
    [Parameter]
    public WorkFlowManager.Common.ViewModels.WorkFlowViewModel Model { get; set; }
    [Parameter]
    public int taskId { get; set; }
    [Parameter]
    public List<int> elementOfTree { get; set; } = new List<int>();
    [Parameter]
    public List<WorkFlowManager.Common.ViewModels.NextProcess> listOfConditionOption { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {

        var taskList = _workFlowService.GetTaskList();

        var actkiveTask = taskList.SingleOrDefault(x => x.Id == taskId);
        var mainProcess = _workFlowService.GetMainProcessList(taskId);

        var nextProcessList = _workFlowService.GetProcessList(taskId).Select(x => new WorkFlowManager.Common.ViewModels.NextProcess
            {
                MainProcessList = mainProcess, //(mainProcess != null ? new CustomSelectList(mainProcess, "Id", "Name") : null),
                Process = x
            });

        if (nextProcessList.Count() > 0)
        {
            Model = new WorkFlowManager.Common.ViewModels.WorkFlowViewModel
                {
                    ActiveTaskId = taskId,
                    FirstProcessId = actkiveTask.StartingProcessId != null ? (int)actkiveTask.StartingProcessId : 0,
                    NextProcessList = nextProcessList
                };
        }
        else
        {
            Model = new WorkFlowManager.Common.ViewModels.WorkFlowViewModel
                {
                    ActiveTaskId = taskId,
                    NextProcessList = null
                };
        }

        if (Model.NextProcessList != null)
        {
            listOfConditionOption = Model.NextProcessList.Where(x =>
            {
                if (x.Process.GetType() == typeof(WorkFlowManager.Common.Tables.ConditionOption))
                {
                    return true;
                }
                return false;
            }).ToList();
        }
        await base.OnInitializedAsync();
    }
}
