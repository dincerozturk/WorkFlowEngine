@using WorkFlowManager.Common.Tables
@{
    if (!(elementOfTree.Contains(taskId) || taskId == 0))
    {
        if (task.Process is Condition || task.Process is ConditionOption)
        {
            linkHref = string.Format("#panelTree_{0}", task.Process.ProcessUniqueCode);
            ikon = "fa-arrows";
            if (task.Process is Condition)
            {
                ConditionOptionler = listOfConditionOption.Where(x => (x.Process as ConditionOption).ConditionId == task.Process.Id).Select(x => (x.Process as ConditionOption)).ToList();
            }
            else //Koşul seçenek ise koşulu karar noktası mı? Karar noktası ise maddelerin silinmesine izin verilmeyecek
            {
                var secenekCondition = model.NextProcessList.Single(x => x.Process.Id == (task.Process as ConditionOption).ConditionId);
                if (secenekCondition.Process is DecisionPoint)
                {
                    silinebilir = false;
                }
            }
        }
        else
        {
            ikon = "fa-arrow-right";
        }

        if (!(task.Process is Condition))
        {
            islemGosterim = string.Format("{0} {1} <i class=\"fa fa-arrow-right\"></i>", "<i class=\"fa " + @ikon + " \"></i>", task.Process.Name);
        }
        else
        {
            islemGosterim = string.Format("{0} {1}", "<i class=\"fa " + @ikon + " \"></i>", task.Process.Name);
        }
        var panelId = string.Format("panelTree_{0}", task.Process.ProcessUniqueCode);
        var panelTreeLinkId = string.Format("panelTreeLink_{0}", task.Process.ProcessUniqueCode);


        <div class='panel panel-default'>
            <div class='panel-heading'>
                <h4 class='panel-title'>

                    <a data-toggle='collapse' id="@panelTreeLinkId" href='@linkHref'>@((MarkupString)(islemGosterim))</a>


                    @if (!(task.Process is Condition))
                    {
                        //@Html.EditorFor(x => task)
                    }
                    @if (
            (
            silinebilir
            &&
            !(task.Process.GetType() == typeof(Condition))
            ||
            (task.Process.GetType() == typeof(Condition) && ConditionOptionler != null && ConditionOptionler.Count() == 0)
            )
            )
                    {
                        //<a href="@Url.Action("Delete", new { processId = task.Process.Id, taskId = task.Process.TaskId })" data-post="Are you sure you want to delete?" class="pull-right"><i class="glyphicon glyphicon-remove" style="color:red" title="Delete"></i></a>
                    }
                    else
                    {
                        <i class="glyphicon glyphicon-remove pull-right" style="color:lightgray"></i>
                    }

                </h4>
            </div>


            @if (task.Process is Condition || task.Process is ConditionOption)
            {

                <text>
                    @((MarkupString)string.Format("<div class='panel-collapse collapse' id='{0}'><div class='panel-body'>", @panelId)))
                </text>
                if (task.Process is Condition)
                {
                    if (!(task.Process is DecisionPoint))
                    {
                        <div class="btn-group">
                        </div>
                    }
                    foreach (var option in model.NextProcessList)
                    {
                        if (option.Process is ConditionOption)
                        {
                            if (((ConditionOption)option.Process).ConditionId == task.Process.Id)
                            {
                                <WFE.Core.Web.Views.Components.TaskWriterComponent taskId="@option.Process.Id" model="@model" elementOfTree="@elementOfTree" listOfConditionOption="@listOfConditionOption" />

                                //@TaskWriter(option.Process.Id, elementOfTree, listOfConditionOption)
                                //;
                            }
                        }
                    }
                }
                else if (task.Process is ConditionOption)
                {
                    if (task.Process.NextProcessId != null)
                    {
                        <WFE.Core.Web.Views.Components.TaskWriterComponent taskId="@((int)task.Process.NextProcessId)" model="@model" elementOfTree="@elementOfTree" listOfConditionOption="@listOfConditionOption" />

                        //@TaskWriter((int)task.Process.NextProcessId, elementOfTree, listOfConditionOption)
                        //;
                    }
                }

                <text>
                    @((MarkupString)("</div></div>"))
                </text>
            }

        </div>




        if (task.Process.NextProcessId != null)
        {
            <WFE.Core.Web.Views.Components.TaskWriterComponent taskId="@((int)task.Process.NextProcessId)" model="@model" elementOfTree="@elementOfTree" listOfConditionOption="@listOfConditionOption" />

            //@TaskWriter((int)task.Process.NextProcessId, elementOfTree, listOfConditionOption)
            //;
        }
    }

    
}
@code {
    //[Parameter]
    //public WorkFlowManager.Common.ViewModels.TaskWriterModel Model { get; set; }

    [Parameter]
    public WorkFlowManager.Common.ViewModels.WorkFlowViewModel model { get; set; }
    [Parameter]
    public int taskId { get; set; }
    [Parameter]
    public List<int> elementOfTree { get; set; } = new List<int>();
    [Parameter]
    public List<WorkFlowManager.Common.ViewModels.NextProcess> listOfConditionOption { get; set; } = new List<WorkFlowManager.Common.ViewModels.NextProcess>();

    private List<ConditionOption> ConditionOptionler = null;
    private WorkFlowManager.Common.ViewModels.NextProcess task = null;
    string ikon = "";
    string linkHref = "#";
    bool silinebilir = true;
    string islemGosterim = "";
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //elementOfTree = Model.elementOfTree;
        //listOfConditionOption = Model.listOfConditionOption;
        //taskId = Model.taskId ?? 0;
        //model = Model.Model;

        task = model.NextProcessList.SingleOrDefault(x => x.Process.Id == taskId);
        elementOfTree.Add(taskId);
        await base.OnInitializedAsync();
    }
}
